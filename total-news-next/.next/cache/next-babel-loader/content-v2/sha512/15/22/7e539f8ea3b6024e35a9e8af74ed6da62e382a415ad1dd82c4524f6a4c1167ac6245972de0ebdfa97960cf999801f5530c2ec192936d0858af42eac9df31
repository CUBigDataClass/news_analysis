{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/timothylenahan/Projects/news_analysis/total-news-next/pages/article/[id]/index.js\";\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nconst article = ({\n  article\n}) => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: article.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: article.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getStaticProps = async context => {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${context.params.id}`);\n  const article = await res.json();\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\n  const articles = await res.json();\n  const ids = articles.map(article => article.id);\n  const paths = ids.map(id => ({\n    param: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default article;","map":{"version":3,"sources":["/Users/timothylenahan/Projects/news_analysis/total-news-next/pages/article/[id]/index.js"],"names":["Link","useRouter","article","router","id","query","title","body","getStaticProps","context","res","fetch","params","json","props","getStaticPaths","articles","ids","map","paths","param","toString","fallback"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACA,EAAAA;AAAD,CAAD,KAAe;AAC3B,QAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,QAAM;AAACG,IAAAA;AAAD,MAAOD,MAAM,CAACE,KAApB;AAEA,sBACI;AAAA,4BACA;AAAA,gBAAKH,OAAO,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,gBAAIJ,OAAO,CAACK;AAAZ;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADJ;AAQH,CAZD;;AAcA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC7C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,8CAA6CF,OAAO,CAACG,MAAR,CAAeR,EAAG,EAAjE,CAAvB;AAEA,QAAMF,OAAO,GAAG,MAAMQ,GAAG,CAACG,IAAJ,EAAtB;AAEA,SAAO;AACHC,IAAAA,KAAK,EAAE;AACHZ,MAAAA;AADG;AADJ,GAAP;AAKH,CAVM;AAYP,OAAO,MAAMa,cAAc,GAAG,YAAY;AACtC,QAAML,GAAG,GAAG,MAAMC,KAAK,CAAE,4CAAF,CAAvB;AAEA,QAAMK,QAAQ,GAAG,MAAMN,GAAG,CAACG,IAAJ,EAAvB;AAEA,QAAMI,GAAG,GAAGD,QAAQ,CAACE,GAAT,CAAahB,OAAO,IAAIA,OAAO,CAACE,EAAhC,CAAZ;AAEA,QAAMe,KAAK,GAAGF,GAAG,CAACC,GAAJ,CAAQd,EAAE,KAAK;AAACgB,IAAAA,KAAK,EAAE;AAAChB,MAAAA,EAAE,EAAEA,EAAE,CAACiB,QAAH;AAAL;AAAR,GAAL,CAAV,CAAd;AAEA,SAAO;AACHF,IAAAA,KADG;AAEHG,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH,CAbM;AAeP,eAAepB,OAAf","sourcesContent":["import Link from 'next/link'\nimport {useRouter} from 'next/router'\n\nconst article = ({article}) => {\n    const router = useRouter()\n    const {id} = router.query\n\n    return (\n        <>\n        <h1>{article.title}</h1>\n        <p>{article.body}</p>\n        <br/>\n        <Link href='/'>Go back</Link>\n        </>\n    )\n}\n\nexport const getStaticProps = async (context) => {\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${context.params.id}`)\n\n    const article = await res.json()\n\n    return {\n        props: {\n            article\n        }\n    }\n}\n\nexport const getStaticPaths = async () => {\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts`)\n\n    const articles = await res.json()\n\n    const ids = articles.map(article => article.id)\n\n    const paths = ids.map(id => ({param: {id: id.toString()}}))\n\n    return {\n        paths,\n        fallback: false\n    }\n}\n\nexport default article\n"]},"metadata":{},"sourceType":"module"}